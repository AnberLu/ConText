#!/bin/bash
  ####  Input: token file (one review per line; tokens are delimited by white space): *.txt.tok
  ####         label file (one label per line): *.cat
  ####  These input files were generated by prep_imdb.sh and included in the package. 
  ####  To find the order of the data points, see prep_imdb.sh and the files at lst/.  

  #-----------------#
  gpu=-1  # <= change this to, e.g., "gpu=0" to use a specific GPU. 
  mem=2   # pre-allocate 2GB device memory 
  source sh-common.sh
  #-----------------#
  nm=imdb
# nm=elec # <= Uncomment this to train/test on Elec 
  z=sq # To avoid filename conflict with other scripts. 
  options="LowerCase UTF8"

  #---  Step 1. Generate vocabulary
  echo Generaing vocabulary from training data ... 
  max_num=30000  # maximum vocabulary size.
  vocab_fn=${tmpdir}/${nm}${z}_trn-${max_num}.vocab
  $prep_exe gen_vocab input_fn=data/${nm}-train.txt.tok vocab_fn=$vocab_fn max_vocab_size=$max_num \
                            $options WriteCount
  if [ $? != 0 ]; then echo $shnm: gen_vocab failed.; exit 1; fi

  #---  Step 2. Generate region files (${tmpdir}/*.xsmatbcvar), target files (${tmpdir}/*.y), 
  #---          and word-mapping files (${tmpdir}/*.xtext).  
  echo; echo Generating region files ... 
  p=3  # region size 
  for set in train test; do 
    $prep_exe gen_regions $options region_fn_stem=${tmpdir}/${nm}${z}_${set}-p${p} \
        input_fn=data/${nm}-${set} vocab_fn=$vocab_fn label_dic_fn=data/${nm}_cat.dic \
        patch_size=$p padding=$((p-1))
    if [ $? != 0 ]; then echo $shnm: gen_regions failed.; exit 1; fi
  done

  #---  Step 3. Training and test using GPU
  mynm=shcnn-seq-${nm}
  log_fn=${logdir}/${mynm}.log; csv_fn=${csvdir}/${mynm}.csv
  echo; echo Training CNN and testing ... ; echo This takes a while.  See $log_fn and $csv_fn for progress. 
  $exe $gpu:$mem train data_dir=$tmpdir datatype=sparse \
         trnname=${nm}${z}_train-p${p} tstname=${nm}${z}_test-p${p} \
         save_fn=${outdir}/${mynm}-mod save_interval=100 \
         loss=Square num_epochs=100 \
         reg_L2=1e-4 momentum=0.9 mini_batch_size=100 random_seed=1 \
         step_size=0.05 ss_scheduler=Few ss_decay=0.1 ss_decay_at=80 \
         layers=1 0layer_type=Weight+ 0nodes=1000 0activ_type=Rect \
         0pooling_type=Max 0num_pooling=1 0resnorm_type=Text  \
         top_dropout=0.5 test_interval=25 evaluation_fn=$csv_fn > ${log_fn}
  if [ $? != 0 ]; then echo $shnm: training failed.; exit 1; fi

  rm -f ${tmpdir}/${nm}${z}*
